"use client";

import { useMemo, useState } from "react";
import { RefreshCw, ScanLine, History } from "lucide-react";
import type { KolRow } from "@/components/types";
import { fmtER, mergeDisplayCoins, totalsFromRow, normalized } from "@/lib/kols";
import { useKolAggregations } from "@/hooks/useKolAggregations";
import { useScanTimeline } from "@/hooks/useScanTimeline";

export type KolTableProps = {
  rows: KolRow[];
  loading?: boolean;
  onRefresh?: () => void;
  onUpdateOne?: (handle: string) => void;
  updatingMap?: Record<string, boolean>;
};

export default function KolTable({
  rows,
  loading = false,
  onRefresh,
  onUpdateOne,
  updatingMap = {},
}: KolTableProps) {
  /** ======= Table UI state ======= */
  const [query, setQuery] = useState("");
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  /** ======= Hooks: aggregations + scan ======= */
  const {
    refreshing,
    refreshVisible,
    getTotals,
    getShillAgg,
    setTotalsOverride,
    setShillOverride,
  } = useKolAggregations();

  const { scanning, scanMsg, scan } = useScanTimeline({
    onTotals: setTotalsOverride,
    onShills: setShillOverride,
    onAfterScan: async () => {
      // 让父级重新 /api/kols/all，避免本地与后端脱节（可选）
      await onRefresh?.();
    },
  });

  /** ======= Derived lists ======= */
  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return rows;
    return rows.filter((r) => {
      const u = (r.twitterUsername || "").toLowerCase();
      const d = (r.displayName || "").toLowerCase();
      return u.includes(q) || d.includes(q);
    });
  }, [rows, query]);

  const pageCount = Math.max(1, Math.ceil(filtered.length / pageSize));
  const safePage = Math.min(page, pageCount);
  const start = (safePage - 1) * pageSize;
  const visible = filtered.slice(start, start + pageSize);

  /** ======= Handlers ======= */
  const handleRefreshVisible = async () => {
    await refreshVisible(visible.map((r) => r.twitterUsername));
    await onRefresh?.();
  };

  const handleScanOne = async (handle: string) => {
    await scan(handle);
  };

  /** ======= Render ======= */
  return (
    <div className="rounded-2xl border border-white/10 bg-white/5 backdrop-blur">
      {/* Toolbar */}
      <div className="p-3 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
        <div className="flex items-center gap-2">
          <input
            className="px-3 py-2 rounded-md bg-black/30 border border-white/10 outline-none text-sm"
            placeholder="Search handle or name…"
            value={query}
            onChange={(e) => {
              setQuery(e.target.value);
              setPage(1);
            }}
          />
          <select
            className="px-2 py-2 rounded-md bg-black/30 border border-white/10 outline-none text-sm"
            value={pageSize}
            onChange={(e) => {
              setPageSize(parseInt(e.target.value, 10));
              setPage(1);
            }}
          >
            {[10, 20, 50].map((n) => (
              <option key={n} value={n}>
                {n}/page
              </option>
            ))}
          </select>
        </div>

        <div className="flex items-center gap-2">
          <button
            onClick={handleRefreshVisible}
            disabled={refreshing || loading || visible.length === 0}
            className="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-md border border-white/10 hover:bg-white/10 text-sm disabled:opacity-60"
          >
            <RefreshCw className={`w-4 h-4 ${refreshing ? "animate-spin" : ""}`} />
            {refreshing ? "Refreshing…" : "Refresh visible"}
          </button>
          <button
            onClick={() => onRefresh?.()}
            disabled={loading}
            className="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-md border border-white/10 hover:bg-white/10 text-sm disabled:opacity-60"
            title="Reload list from server"
          >
            <History className={`w-4 h-4 ${loading ? "animate-pulse" : ""}`} />
            Reload list
          </button>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto border-t border-white/10">
        <table className="w-full text-sm">
          <thead className="text-xs text-gray-400">
            <tr className="[&>th]:px-3 [&>th]:py-2 [&>th]:text-left">
              <th>KOL</th>
              <th className="w-[20%]">Totals (7d)</th>
              <th className="w-[20%]">Shills (7d)</th>
              <th className="w-[28%]">Coins</th>
              <th className="w-[22%]">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-white/10">
            {visible.map((r) => {
              const h = r.twitterUsername;
              const totals = getTotals(r); // 覆盖优先，回退到 row
              const rowTotals = totals ?? totalsFromRow(r);

              const views = rowTotals.totalViews;
              const engs = rowTotals.totalEngs;
              const er = fmtER(views, engs);

              const sh = getShillAgg(h, r);
              const coins = mergeDisplayCoins(sh?.coins ?? (r.coinsShilled || []).map((c) => ({ tokenDisplay: c, count: 1 })));

              const busyUpdate = !!updatingMap[normalized(h)];
              const busyScan = !!scanning[normalized(h)];

              return (
                <tr key={h} className="[&>td]:px-3 [&>td]:py-2 align-top">
                  {/* KOL */}
                  <td className="min-w-[180px]">
                    <div className="flex items-center gap-3">
                      {r.profileImgUrl ? (
                        // eslint-disable-next-line @next/next/no-img-element
                        <img
                          src={r.profileImgUrl}
                          alt={h}
                          className="w-8 h-8 rounded-full object-cover border border-white/10"
                        />
                      ) : (
                        <div className="w-8 h-8 rounded-full bg-white/10" />
                      )}
                      <div>
                        <div className="font-medium text-white leading-tight">@{h}</div>
                        <div className="text-xs text-gray-400">
                          {(r.displayName && <span>{r.displayName}</span>) || <span>—</span>} ·{" "}
                          <span>{(r.followers ?? 0).toLocaleString()} followers</span>
                        </div>
                      </div>
                    </div>
                  </td>

                  {/* Totals */}
                  <td>
                    <div className="text-gray-200">
                      <div className="flex items-center gap-3">
                        <span>Tweets: <b>{rowTotals.totalTweets.toLocaleString()}</b></span>
                        <span>Views: <b>{views.toLocaleString()}</b></span>
                        <span>Engs: <b>{engs.toLocaleString()}</b></span>
                      </div>
                      <div className="text-xs text-emerald-300 mt-0.5">ER: {er}</div>
                    </div>
                  </td>

                  {/* Shills */}
                  <td>
                    {sh ? (
                      <div className="text-gray-200">
                        <div className="flex items-center gap-3">
                          <span>Shills: <b>{(sh.totalShills || 0).toLocaleString()}</b></span>
                          <span>Views: <b>{(sh.shillsViews || 0).toLocaleString()}</b></span>
                          <span>Engs: <b>{(sh.shillsEngs || 0).toLocaleString()}</b></span>
                        </div>
                        <div className="text-xs text-gray-400 mt-0.5">
                          ER: {fmtER(sh.shillsViews || 0, sh.shillsEngs || 0)}
                        </div>
                      </div>
                    ) : (
                      <span className="text-gray-500">—</span>
                    )}
                  </td>

                  {/* Coins */}
                  <td>
                    <div className="flex flex-wrap gap-1.5">
                      {coins.slice(0, 6).map((c) => (
                        <span
                          key={c.tokenKey}
                          className="px-2 py-0.5 rounded-full border border-emerald-400/20 bg-emerald-400/10 text-emerald-200 text-xs"
                        >
                          {c.tokenDisplay}
                          {c.count > 1 ? <span className="opacity-70">×{c.count}</span> : null}
                        </span>
                      ))}
                      {coins.length > 6 && (
                        <span className="px-2 py-0.5 rounded-full border border-white/10 text-white/70 text-xs">
                          +{coins.length - 6} more
                        </span>
                      )}
                    </div>
                  </td>

                  {/* Actions */}
                  <td>
                    <div className="flex flex-wrap gap-2">
                      <button
                        onClick={() => handleScanOne(h)}
                        disabled={busyScan}
                        className="inline-flex items-center gap-1.5 px-2.5 py-1.5 rounded-md border border-white/10 hover:bg-white/10 text-xs disabled:opacity-60"
                        title="Scan Timeline (last 7d)"
                      >
                        <ScanLine className={`w-4 h-4 ${busyScan ? "animate-pulse" : ""}`} />
                        {busyScan ? "Scanning…" : "Scan 7d"}
                      </button>

                      <button
                        onClick={() => onUpdateOne?.(h)}
                        disabled={busyUpdate}
                        className="inline-flex items-center gap-1.5 px-2.5 py-1.5 rounded-md border border-white/10 hover:bg-white/10 text-xs disabled:opacity-60"
                      >
                        {busyUpdate ? (
                          <span className="inline-block w-3 h-3 rounded-full border-2 border-white/50 border-t-transparent animate-spin" />
                        ) : null}
                        Update
                      </button>
                    </div>

                    {/* Scan toast */}
                    {scanMsg[normalized(h)] && (
                      <div className="text-[11px] text-gray-400 mt-1">{scanMsg[normalized(h)]}</div>
                    )}
                  </td>
                </tr>
              );
            })}

            {visible.length === 0 && (
              <tr>
                <td colSpan={5} className="px-3 py-6 text-center text-gray-500">
                  {loading ? "Loading…" : query ? "No results" : "No data"}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="p-3 flex items-center justify-between text-xs text-gray-400">
        <div>
          Page <b className="text-white">{safePage}</b> / {pageCount} ·{" "}
          <span className="text-gray-300">{filtered.length}</span> items
        </div>
        <div className="flex items-center gap-2">
          <button
            className="px-2 py-1 rounded border border-white/10 hover:bg-white/10 disabled:opacity-50"
            onClick={() => setPage(1)}
            disabled={safePage <= 1}
            aria-label="First page"
          >
            «
          </button>
          <button
            className="px-2 py-1 rounded border border-white/10 hover:bg-white/10 disabled:opacity-50"
            onClick={() => setPage((p) => Math.max(1, p - 1))}
            disabled={safePage <= 1}
            aria-label="Prev page"
          >
            ‹
          </button>
          <button
            className="px-2 py-1 rounded border border-white/10 hover:bg-white/10 disabled:opacity-50"
            onClick={() => setPage((p) => Math.min(pageCount, p + 1))}
            disabled={safePage >= pageCount}
            aria-label="Next page"
          >
            ›
          </button>
          <button
            className="px-2 py-1 rounded border border-white/10 hover:bg-white/10 disabled:opacity-50"
            onClick={() => setPage(pageCount)}
            disabled={safePage >= pageCount}
            aria-label="Last page"
          >
            »
          </button>
        </div>
      </div>
    </div>
  );
}
