"use client";

import { Crown, Medal } from "lucide-react";
import React from "react";
import CoinsChipList from "../admin/CoinsChipList";

export type CoinStat = { tokenKey: string; tokenDisplay: string; count: number };

export function nCompact(n: number) {
  const num = Number(n) || 0;
  try {
    return new Intl.NumberFormat(undefined, {
      notation: "compact",
      maximumFractionDigits: 1,
    }).format(num);
  } catch {
    if (num >= 1_000_000) return (num / 1_000_000).toFixed(1) + "M";
    if (num >= 1_000) return (num / 1_000).toFixed(1) + "K";
    return String(num);
  }
}

export function pct(engs: number, views: number) {
  if (!views) return "0.0%";
  const v = (engs / views) * 100;
  return `${v.toFixed(1)}%`;
}

export function LeaderboardRow({
  r,
  rank,
  totals,
  shills,
  coinsAll,
}: {
  r: any;
  rank: number;
  totals: { tweets: number; views: number; engs: number; er: number };
  shills: { tweets: number; views: number; engs: number; er: number };
  coinsAll: CoinStat[];
}) {

  const medal =
    rank === 1 ? <Crown size={16} className="text-yellow-300" /> :
    rank === 2 ? <Medal size={16} className="text-gray-300" /> :
    rank === 3 ? <Medal size={16} className="text-amber-500" /> : null;

  return (
    <div className="grid grid-cols-12 gap-2 px-3 py-3 items-center">
      {/* KOL */}
      <div className="col-span-2 flex items-center gap-3 min-w-0 border-r border-white/10">
        <img
          src={r.profileImgUrl || "/favicon.ico"}
          alt={r.displayName || r.twitterUsername || "KOL"}
          className="h-8 w-8 rounded-full object-cover"
          loading="lazy"
        />
        <div className="min-w-0">
          <div className="flex items-center gap-2">
            <a
              href={`https://x.com/${r.twitterUsername}`}
              target="_blank"
              rel="noopener noreferrer"
              className="truncate text-sm text-white hover:underline"
              title={r.bio || ""}
            >
              {r.displayName || r.twitterUsername}
            </a>
            {medal}
          </div>
          <div className="truncate text-xs text-gray-400">
            {nCompact(r.followers || 0)} followers
          </div>
        </div>
      </div>

      {/* Total group */}
      <div className="col-span-1 text-left text-sm tabular-nums pl-2 sm:pl-3">
        {nCompact(totals.tweets)}
      </div>
      <div className="col-span-1 text-left text-sm tabular-nums">{nCompact(totals.views)}</div>
      <div className="col-span-1 text-left text-sm tabular-nums">{nCompact(totals.engs)}</div>
      <div className="col-span-1 text-left text-sm tabular-nums pr-2 sm:pr-3 border-r border-white/10">
        {pct(totals.engs, totals.views)}
      </div>

      {/* Shills group */}
      <div className="col-span-1 text-left text-sm tabular-nums pl-2 sm:pl-3">
        {nCompact(shills.tweets)}
      </div>
      <div className="col-span-1 text-left text-sm tabular-nums">{nCompact(shills.views)}</div>
      <div className="col-span-1 text-left text-sm tabular-nums">{nCompact(shills.engs)}</div>
      <div className="col-span-1 text-left text-sm tabular-nums pr-2 sm:pr-3 border-r border-white/10">
        {pct(shills.engs, shills.views)}
      </div>

      {/* Coins â€” reuse admin chip list for smooth UX */}
      <div className="col-span-2 flex items-center justify-end">
        <CoinsChipList
          coins={coinsAll.map(c => ({
            tokenKey: c.tokenDisplay || String(c.count),
            tokenDisplay: c.tokenDisplay,
            count: c.count,
          }))}
          max={6}
        />
      </div>
    </div>
  );
}
