// components/CampaignLeftPane.tsx
"use client";

import Image from "next/image";
import polinaIcon from "@/public/polina-icon.png";
import ReactMarkdown from "react-markdown";
import { useEffect, useMemo, useState } from "react";
import type { AnalysisInput } from "./types";

export default function CampaignLeftPane({
  onRun,
  aiSummary,
  className = "",
}: {
  /** Run scan with current form data */
  onRun: (input: AnalysisInput) => void;
  /** AI summary markdown returned from console (Gemini) */
  aiSummary?: string | null;
  className?: string;
}) {
  const [form, setForm] = useState<AnalysisInput>({
    projectName: "",
    website: "",
    xProfile: "",
    xCommunity: "",
    telegram: "",
    tokenAddress: "",
  });

  // ---------- helpers ----------
  const ensureString = (v: unknown): string | undefined => {
    if (typeof v === "string") {
      const s = v.trim();
      return s.length ? s : undefined;
    }
    return undefined;
  };

  // Accept "@handle" or "https://x.com/handle" and normalize to "handle"
  const handleFromUrlOrAt = (s?: string): string | undefined => {
    if (!s) return undefined;
    const raw = s.trim();
    if (!raw) return undefined;
    if (!raw.includes("://")) return raw.replace(/^@/, "");
    try {
      const u = new URL(raw);
      const seg = u.pathname.split("/").filter(Boolean)[0] || "";
      return seg.replace(/^@/, "") || raw.replace(/^@/, "");
    } catch {
      return raw.replace(/^@/, "");
    }
  };

  const parseSafe = (key: string) => {
    try {
      const raw = localStorage.getItem(key);
      if (!raw) return null;
      return JSON.parse(raw);
    } catch {
      return null;
    }
  };

  // ---------- load from URL & localStorage ----------
  useEffect(() => {
    const url = new URL(window.location.href);

    const qp: AnalysisInput = {
      projectName: ensureString(url.searchParams.get("projectName")),
      website: ensureString(url.searchParams.get("website")),
      xProfile: handleFromUrlOrAt(ensureString(url.searchParams.get("xProfile"))),
      xCommunity: ensureString(url.searchParams.get("xCommunity")),
      telegram: ensureString(url.searchParams.get("telegram")),
      tokenAddress: ensureString(url.searchParams.get("tokenAddress")),
    };

    const stored = (parseSafe("campaignDraft") ?? {}) as Partial<AnalysisInput>;

    const merged: AnalysisInput = {
      projectName: qp.projectName ?? ensureString(stored.projectName),
      website: qp.website ?? ensureString(stored.website),
      xProfile: qp.xProfile ?? handleFromUrlOrAt(ensureString(stored.xProfile)),
      xCommunity: qp.xCommunity ?? ensureString(stored.xCommunity),
      telegram: qp.telegram ?? ensureString(stored.telegram),
      tokenAddress: qp.tokenAddress ?? ensureString(stored.tokenAddress),
    };

    setForm((f) => ({ ...f, ...merged }));
  }, []);

  useEffect(() => {
    localStorage.setItem("campaignDraft", JSON.stringify(form));
  }, [form]);

  const canAnalyze = useMemo(() => {
    return Boolean(
      (form.projectName && form.projectName.trim()) ||
        (form.xProfile && form.xProfile.trim()) ||
        (form.tokenAddress && form.tokenAddress.trim())
    );
  }, [form]);

  // ---------- AI Understanding ----------
  const normalizedSummary = useMemo(
    () => normalizeGeminiMarkdown(aiSummary || ""),
    [aiSummary]
  );
  const sections = useMemo(() => splitSections(normalizedSummary), [normalizedSummary]);

  const [openIndex, setOpenIndex] = useState(0);

  return (
    <div className={`flex flex-col gap-6 w-full ${className}`}>
      {/* === Card 1: Campaign · Input === */}
      <div className="p-6 w-full rounded-2xl shadow-2xl bg-gradient-to-br from-[#101c1b] via-[#0c1111] to-[#0a0f0e] border border-white/5">
        <h2 className="text-xl font-bold mb-4 bg-gradient-to-r from-[#2fd480] via-[#3ef2ac] to-[#27a567] text-transparent bg-clip-text">
          Campaign · Input
        </h2>

        <div className="space-y-3">
          <input
            className="w-full px-3 py-2 bg-[#0d0d0d] border border-[#333] focus:ring-2 focus:ring-[#64e3a1] rounded-md text-white placeholder:text-gray-500 text-sm"
            placeholder="Project name (e.g. Moodeng)"
            value={form.projectName || ""}
            onChange={(e) => setForm({ ...form, projectName: e.target.value })}
          />
          <input
            className="w-full px-3 py-2 bg-[#0d0d0d] border border-[#333] focus:ring-2 focus:ring-[#64e3a1] rounded-md text-white placeholder:text-gray-500 text-sm"
            placeholder="Website (optional)"
            value={form.website || ""}
            onChange={(e) => setForm({ ...form, website: e.target.value })}
          />
          <input
            className="w-full px-3 py-2 bg-[#0d0d0d] border border-[#333] focus:ring-2 focus:ring-[#64e3a1] rounded-md text-white placeholder:text-gray-500 text-sm"
            placeholder="X / Twitter profile (e.g. @project or https://x.com/project)"
            value={form.xProfile || ""}
            onChange={(e) =>
              setForm({ ...form, xProfile: handleFromUrlOrAt(e.target.value) || "" })
            }
          />
          <input
            className="w-full px-3 py-2 bg-[#0d0d0d] border border-[#333] focus:ring-2 focus:ring-[#64e3a1] rounded-md text-white placeholder:text-gray-500 text-sm"
            placeholder="Token contract address (optional)"
            value={form.tokenAddress || ""}
            onChange={(e) => setForm({ ...form, tokenAddress: e.target.value })}
          />
        </div>

        <button
          onClick={() => onRun(form)}
          disabled={!canAnalyze}
          className="mt-4 w-full flex items-center justify-center gap-2 px-4 py-2 bg-gradient-to-r from-[#27a567] to-[#2fd480] hover:from-[#239e5d] hover:to-[#38ec9c] text-white rounded-md text-sm font-semibold transition shadow disabled:opacity-50"
        >
          {canAnalyze ? "✨ Analyze" : "Fill one of: Project / X / Token"}
        </button>

        <div className="mt-3 text-xs text-gray-500">
          Tip: You can also pass fields via URL, e.g. <code>?xProfile=@project&tokenAddress=...</code>
        </div>
      </div>

      {/* === Card 2: Polina · AI Understanding === */}
      <div className="p-6 w-full rounded-2xl shadow-2xl bg-gradient-to-br from-[#101c1b] via-[#0c1111] to-[#0a0f0e] border border-white/5">
        <h2 className="text-xl font-bold mb-4 bg-gradient-to-r from-[#2fd480] via-[#3ef2ac] to-[#27a567] text-transparent bg-clip-text">
          Polina · AI Understanding
        </h2>

        {!aiSummary ? (
          <div className="text-sm text-gray-500">
            Waiting for AI analysis… it appears here once tweets are collected.
          </div>
        ) : sections.length === 0 ? (
          <div className="bg-[#1a1a1a] rounded-lg p-4 border border-white/10 prose prose-invert max-w-none">
            <ReactMarkdown>{normalizedSummary}</ReactMarkdown>
          </div>
        ) : (
          <>
            <div className="flex items-start gap-3 mb-4">
              <Image src={polinaIcon} alt="Polina" width={28} height={28} className="rounded-full" />
              <div>
                <div className="text-xs text-gray-400 mb-1">Polina · AI Agent</div>
                <p className="leading-snug text-gray-300">
                  Here is what I discovered about your project, based on the tweets collected:
                </p>
              </div>
            </div>

            {sections.map((sec, idx) => (
              <div key={idx} className="bg-[#1a1a1a] rounded-lg border border-white/10 mb-3">
                <div
                  className="p-4 cursor-pointer text-sm font-semibold text-white"
                  onClick={() => setOpenIndex(idx)}
                >
                  {sec.title}
                </div>
                {openIndex === idx && (
                  <div className="p-4 pt-0 text-sm text-gray-300">
                    <ReactMarkdown>{sec.content}</ReactMarkdown>
                  </div>
                )}
              </div>
            ))}
          </>
        )}
      </div>
    </div>
  );
}

function normalizeGeminiMarkdown(text: string): string {
  if (!text) return "";
  let out = text.trim();

  out = out.replace(/(^|\n)\s*#{1,6}\s*insights\s*$/i, "$1### Project Overview");

  if (!/(^|\n)###\s+/i.test(out)) {
    out = `### Project Overview\n${out}`;
  }

  const scoreLines: string[] = [];
  out = out.replace(
    /(?:^|\n)\s*[-*]\s*(Community Involvement|Content Clarity|Virality Potential)\s*:\s*([0-9]+(?:\s*\/\s*10)?)/gi,
    (_, k: string, v: string) => {
      scoreLines.push(`- ${k}: ${v.replace(/\s+/g, "")}`);
      return "";
    }
  );
  if (scoreLines.length && !/(^|\n)###\s+Scores/i.test(out)) {
    out += `\n\n### Scores\n${scoreLines.join("\n")}\n`;
  }

  if (!/(^|\n)###\s+Key Themes/i.test(out)) {
    const bullets = Array.from(out.matchAll(/(?:^|\n)[*-]\s+(.+?)(?=\n|$)/g)).map((m) => `- ${m[1]}`);
    const unique = Array.from(new Set(bullets)).slice(0, 6);
    if (unique.length) out += `\n\n### Key Themes\n${unique.join("\n")}\n`;
  }

  return out.trim();
}

function splitSections(text: string): { title: string; content: string }[] {
  if (!text?.trim()) return [];
  const sectionRegex = /###\s+(.*?)\r?\n/gi;
  const out: { title: string; content: string }[] = [];
  let match: RegExpExecArray | null;
  let lastIndex = 0;

  while ((match = sectionRegex.exec(text)) !== null) {
    if (out.length > 0) out[out.length - 1].content = text.slice(lastIndex, match.index).trim();
    out.push({ title: match[1].trim(), content: "" });
    lastIndex = match.index + match[0].length;
  }
  if (out.length > 0) out[out.length - 1].content = text.slice(lastIndex).trim();

  const hasReal = out.some((s) => s.content && s.content.trim().length > 0);
  if (!hasReal) return [];
  return out.filter((s) => s.title.toLowerCase() !== "gemini analysis");
}
