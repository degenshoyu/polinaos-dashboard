"use client";

import type { EmotionalLandscape } from "@/lib/analysis/emotionalLandscape";

const card = "p-6 w-full rounded-2xl shadow-2xl bg-gradient-to-br from-[#101c1b] via-[#0c1111] to-[#0a0f0e] border border-white/5";

export default function EmotionalLandscapeCard({ data }: { data: EmotionalLandscape }) {
  return (
    <div className="flex flex-col gap-4">
      <div className={card}>
        <h3 className="text-lg font-semibold mb-2">Emotional Landscape</h3>
        <p className="text-sm text-white/70 mb-4">
          Bullish 🐂 / Bearish 🐻 / Optimistic / Neutral / Concerned · intensity weighted by views & engagements
        </p>

        <div className="space-y-3">
          {data.buckets.map((b) => (
            <div key={b.label}>
              <div className="flex items-center justify-between mb-1">
                <span className="capitalize">{labelIcon(b.label)} {b.label}</span>
                <span className="text-white/80">{b.sharePct}%</span>
              </div>
              <div className="h-2 rounded-full bg-white/10 overflow-hidden">
                <div className="h-full rounded-full bg-emerald-400/70" style={{ width: `${b.sharePct}%` }} />
              </div>
              <div className="mt-1 text-xs text-white/60">
                intensity: <b>{b.intensity.low}</b> low · <b>{b.intensity.mid}</b> mid · <b>{b.intensity.high}</b> high
              </div>
              {b.keywordsTop.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-1">
                  {b.keywordsTop.slice(0, 6).map((k) => (
                    <span key={k.term} className="px-2 py-0.5 text-xs rounded-full bg-white/5 border border-white/10">
                      {k.term} <span className="text-white/50">×{k.count}</span>
                    </span>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className={card}>
        <h3 className="text-lg font-semibold mb-3">Representative Tweets</h3>
        <div className="grid md:grid-cols-2 gap-4">
          {data.buckets.map((b) => (
            <div key={b.label}>
              <div className="mb-2 font-medium capitalize">{labelIcon(b.label)} {b.label}</div>
              <ul className="space-y-2 text-sm">
                {b.topTweets.slice(0, 3).map((t, i) => (
                  <li key={i} className="p-2 rounded-lg bg-white/5 border border-white/10">
                    <div className="flex items-center justify-between">
                      <a className="underline" href={t.statusLink} target="_blank" rel="noreferrer">
                        @{t.tweeter || "unknown"}
                      </a>
                      <span className="text-xs text-white/60">L/R/Rp/V: {t.likes}/{t.retweets}/{t.replies}/{t.views}</span>
                    </div>
                    <div className="text-white/80 mt-1 line-clamp-2">{t.textPreview}</div>
                  </li>
                ))}
                {b.topTweets.length === 0 && <li className="text-white/50">No examples</li>}
              </ul>
            </div>
          ))}
        </div>
      </div>

      <div className="text-xs text-white/40">
        Method: {data.method.version} · {data.method.weightFormula}
      </div>
    </div>
  );
}

function labelIcon(label: string) {
  switch (label) {
    case "bullish": return "🐂";
    case "bearish": return "🐻";
    case "optimistic": return "✨";
    case "concerned": return "⚠️";
    default: return "〰️";
  }
}

