// app/api/coin-prices/route.ts
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import {
  insertPriceSnapshots,
  getLatestPrices,
  PriceUpsertSchema,
} from "@/lib/db/prices";

const GetQuery = z.object({
  addresses: z.string().transform((s) =>
    s
      .split(",")
      .map((x) => x.trim())
      .filter(Boolean),
  ),
  source: z
    .enum(["geckoterminal", "defillama", "manual", "client_push"])
    .optional(),
});

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const parse = GetQuery.safeParse({
      addresses: searchParams.get("addresses") ?? "",
      source: searchParams.get("source") ?? undefined,
    });
    if (!parse.success) {
      return NextResponse.json({ error: parse.error.message }, { status: 400 });
    }
    const rows = await getLatestPrices({
      contractAddresses: parse.data.addresses,
      source: parse.data.source,
    });
    return NextResponse.json({ items: rows }, { status: 200 });
  } catch (e: any) {
    return NextResponse.json(
      { error: e?.message || "Failed to fetch" },
      { status: 500 },
    );
  }
}

const PostBody = z.object({
  items: z
    .array(
      PriceUpsertSchema.extend({
        // Force all client writes to be tagged as client_push by default
        source: z.literal("client_push").default("client_push"),
      }),
    )
    .max(100), // simple DOS-guard
});

export async function POST(req: NextRequest) {
  try {
    const json = await req.json();
    const body = PostBody.parse(json);
    await insertPriceSnapshots(body.items);
    return NextResponse.json({ ok: true }, { status: 200 });
  } catch (e: any) {
    return NextResponse.json(
      { error: e?.message || "Failed to upsert" },
      { status: 400 },
    );
  }
}
